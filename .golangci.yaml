# Options for analysis running
run:
  # Default concurrency is a available CPU number
  concurrency: 4
  # Timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m
  # Exit code when at least one issue was found, default is 1
  issues-exit-code: 1
  # Include test files or not, default is true
  tests: true
  # List of build tags, all linters use it
  build-tags: [ ]
  # Include directories
  # Default: []
  go: '1.23'

# Linters settings
linters-settings:
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    check-type-assertions: true
    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    check-blank: true
  funlen:
    lines: 100
    statements: 50
  gocognit:
    # Minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  gocritic:
    # Enable multiple checks by tags
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
  gocyclo:
    # Minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15
  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`
    scope: declarations
    # Check that each sentence starts with a capital letter
    capital: true
  gofmt:
    # Simplify code: gofmt with `-s` option, true by default
    simplify: true
  goimports:
    # Put imports beginning with prefix after 3rd-party packages
    local-prefixes: github.com/tradingiq/bitunix-client
  gosimple:
    # Select the Go version to target. The default is '1.13'.
    go: "1.23"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]
  govet:
    # Report about shadowed variables
    check-shadowing: true
    # Settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  lll:
    # Max line length, lines longer will be reported. Default is 120.
    line-length: 120
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
  nakedret:
    # Make an issue if func has more lines of code than this setting and it has naked returns
    # Default is 30
    max-func-lines: 30
  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Allow no space between `//` and `nolint`. Default is false.
    allow-leading-space: true
    # Require explanation for nolint directive. Default is false.
    require-explanation: true
    # Require specific explanation for nolint directive. Default is false.
    require-specific: true
  prealloc:
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # Default is false.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops.
    for-loops: true # Report preallocation suggestions on for loops.
  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.23"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    check-exported: false
  unused:
    # Select the Go version to target. The default is '1.13'.
    go: "1.23"
    # https://staticcheck.io/docs/options#checks
    check-exported: false

linters:
  enable:
    - bodyclose # checks whether HTTP response body is closed successfully
    - deadcode # finds unused code
    - depguard # checks if package imports are in a list of acceptable packages
    - dogsled # checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl # checks code clone duplication
    - errcheck # checking for unchecked errors
    - exhaustive # check exhaustiveness of enum switch statements
    - funlen # detect functions and methods that are too long
    - gochecknoinits # checks that no init functions are present
    - goconst # finds repeated strings that could be replaced by a constant
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gocyclo # computes and checks the cyclomatic complexity of functions
    - gofmt # checks whether code was gofmt-ed
    - goimports # checks import statements are formatted according to the 'goimport' command
    - golint # golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gomnd # detects magic numbers
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec # inspects source code for security problems
    - gosimple # simplify code
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - lll # reports long lines
    - misspell # finds commonly misspelled English words in comments
    - nakedret # finds naked returns in functions greater than a specified function length
    - nolintlint # reports ill-formed or insufficient nolint directives
    - prealloc # finds slice declarations that could potentially be preallocated
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go
    - staticcheck # comprehensive static analyzer
    - structcheck # finds unused struct fields
    - stylecheck # like golint but more strict
    - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert # remove unnecessary type conversions
    - unparam # reports unused function parameters
    - unused # checks for unused constants, variables, functions and types
    - varcheck # finds unused global variables and constants
    - whitespace # checks for unnecessary whitespace

  # don't enable: 
  # - godox # detects FIXME, TODO and other comment keywords
  # - maligned # tool to detect Go structs that would take less memory if their fields were sorted
  # - wsl # Whitespace Linter - Forces you to use empty lines

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    # Exclude known linters from partially hard-vendored code.
    - path: vendor/
      text: "weak cryptographic primitive"
      linters:
        - gosec
    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: true

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better to not allow issues in new code.
  # Default is false.
  new: false

output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number
  # Print lines of code with issue, default is true
  print-issued-lines: true
  # Print linter name in the end of issue text, default is true
  print-linter-name: true